Sheep<-read.table("Sheep2.txt", header=T)
Sheep<-read.table("Sheep2.txt", header=T)
Hlep<-read.table("Rockpool16.txt", header=T)
load("B:/OneDrive/Documents/R/Sheep/Sheep2.txt")
Sheep<-read.table("Sheep3.txt", header=T)
Sheep<-read.csv("Sheep3.txt", header=T)
Sheep<-read.csv("Sheep3.csv", header=T)
Sheep<-read.csv("Sheep3.csv", header=T)
Sheep<-read.table("Sheep3.txt", header=T)
Sheep<-read.table("Sheep3.txt", header=T)
Sheep<-read.table("Sheep4.txt", header=T)
Sheep<-read.table("Sheep4.txt", header=T)
Sheep<-read.table("Sheep4.txt", header=T)
turtle <- function (Start=c(0,0), Direction, Length){
Angle = Direction
Y = cos(Angle)*Length
X = sin(Angle)*Length
segments(Start[1], Start[2], X+Start[1], Y+Start[2])
return(c(X+Start[1],Y+Start[2]))
}
elbow <- function (Start, Direction, Length){
Point_1<-turtle(Start=Start, Direction=Direction, Length=Length)
Point_2<-turtle(Start=c(Point_1), Direction=Direction+(pi/4), Length=0.95*Length)
}
tree <- function (Start, Direction, Length){
if (Length > 0.01){
Point_1<-turtle(Start=Start, Direction=Direction, Length=Length)
Point_2<-tree(Start=c(Point_1), Direction=Direction+(pi/4), Length=0.65*Length)
Point_3<-tree(Start=c(Point_1), Direction=Direction-(pi/4), Length=0.65*Length)
}
else {
return("ended")
}
}
plot.new()
plot(x=NULL, ylim=c(-5,5), xlim=c(-5,5), xlab="", ylab="", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, main="Start=(0,0), Direction=2, Length=2")
tree(c(0,2), 2, 2)
tree(c(0,2), 0, 2)
tree(c(0,-2), 0, 2)
plot.new()
plot(x=NULL, ylim=c(-5,5), xlim=c(-5,5), xlab="", ylab="", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, main="Start=(0,0), Direction=2, Length=2")
tree(c(0,-2), 0, 2)
plot(x=NULL, ylim=c(-5,5), xlim=c(-5,5), xlab="", ylab="", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, main="Start=(0,-2), Direction=0, Length=2")
tree(c(0,-2), 0, 2)
plot(x=NULL, ylim=c(-5,5), xlim=c(-5,5), xlab="", ylab="", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, main="Start=(0,-2), Direction=0, Length=2")
spiral_2(c(0,2), 2, 2)
spiral_2 <- function (Start, Direction, Length){
if (Length > 0.01){
Point_1<-turtle(Start=Start, Direction=Direction, Length=Length)
Point_2<-spiral_2(Start=c(Point_1), Direction=Direction+(pi/4), Length=0.95*Length)
}
else {
return("ended")
}
}
spiral_2(c(0,2), 2, 2)
plot(x=NULL, ylim=c(-5,5), xlim=c(-5,5), xlab="", ylab="", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5, main="Start=(0,2), Direction=2, Length=2")
spiral_2(c(0,2), 2, 2)
question_16 <- function(initial=initialise_max(100), v=0.1){
for (i in 1:200){
initial <- neutral_generation_speciation(initial, v) # Runs one generation's changes
}
vect<- octaves(species_abundance(initial))
vect_mean=1
for (i in 1:2000){
initial <- neutral_generation_speciation(initial, v) # Runs one generation's changes
if (i %% 20 == 0){
vect<-sum_vect(vect, octaves(species_abundance(initial)))
vect_mean=vect_mean+1
}
}
vect<-vect/vect_mean
names(vect)<- 2^(seq(length(vect)))
p <- barplot(vect, xlab = "Abundance", ylab="No. of Species", ylim=c(0, 10))
return(p)
}
question_16(initial=initialise_max(100))
# Function to calculate species richness of an input community
species_richness <- function(community=c(1,5,3,7,2,3,1,1,2,1,6)){
return(length(unique(community)))
}
# Gives a vector from 0 to size
initialise_max <- function(size=8){
return (seq(size))
}
# Gives a vector of n 1s where n is size
initialise_min <- function(size=8){
return(rep(1, size))
}
# Creates a vector of two random number from a given input vector
choose_two <- function(x=c(1,5,3,7,2,3,1,1,2,1,6)){
sample(x,2)
}
# Replaces one member of a community with another (simulates death and birth)
neutral_step <- function(community=c(1,5,3,7,2,3,1,1,2,1,6)){
rand <- choose_two(seq(length(community)))
community[rand[1]] <- community[rand[2]]
return(community)
}
# Runs neutral_step on a community n/2 times
neutral_generation <- function(community=c(1,5,3,7,2,3,1,1,2,1,6)){
x <- length(community)
if (x %%2 !=0){ # Checks to see if x is exactly divisible by 2 (i.e. even)
x <- x+1
}
gen = x/2
for (i in 1:gen){
community<-neutral_step(community)
}
return(community)
}
# Creates a time series of species richness over duration generations of a community
neutral_time_series <- function(initial=c(1,5,3,7,2,3,1,1,2,1,6), duration=10){
Rich <- c(species_richness(initial)) # Generates the initial species richness
for (i in 1:duration){
initial<-neutral_generation(initial) # Runs one generation's changes
Rich <- c(Rich, species_richness(initial))
}
return(Rich)
}
# Creates a plot of 200 generations of a pop with 100 species
question_8 <- function(){
Data<-neutral_time_series(initialise_max(100), 200)
plot(seq(length(Data)), Data, xlab="Generations",
ylab="Species Richness")
return(p)
}
# Describes one step of a zero sum neutral model with a chance for speciation
neutral_step_speciation <- function(community=c(1,5,3,7,2,3,1,1,2,1,6), v=0.2){
rand <- choose_two(seq(length(community)))
r <- runif(1, min=0, max=1)
if (r <= v){
community[rand[1]] <- max(community)+1
}
else {
community[rand[1]] <- community[rand[2]]
}
return(community)
}
# Describes one generation of a zero sum neutral model with a chance for speciation
neutral_generation_speciation <- function(community=c(1,5,3,7,2,3,1,1,2,1,6), v=0.2){
x <- length(community)
if (x %%2 !=0){ # Checks to see if x is exactly divisible by 2 (i.e. even)
x <- x+1
}
gen = x/2
for (i in 1:gen){
community<-neutral_step_speciation(community, v)
}
return(community)
}
# Describes the species richness of sucessive n(duration) generations of a
# zero sum neutral model with a chance for speciation
neutral_time_series_speciation <- function(initial=c(1,5,3,7,2,3,1,1,2,1,6), v=0.1, duration=20){
Rich <- c(species_richness(initial)) # Generates the initial species richness
for (i in 1:duration){
initial<-neutral_generation_speciation(initial, v) # Runs one generation's changes
Rich <- c(Rich, species_richness(initial))
}
return(Rich)
}
question_12 <- function(){
Datamax<-neutral_time_series_speciation(initialise_max(100), 0.1, 200)
Datamin<-neutral_time_series_speciation(initialise_min(100), 0.1, 200)
p<-plot(seq(length(Datamax)), Datamax, xlab="Generations", ylab="Species Richness", type="l", col="blue")
p<-lines(seq(length(Datamax)), Datamin, col="red")
p<-legend(80,80,legend=c("Max initial richness", "Min initial richness"), col=c("blue", "red"), lty=1:2, cex=1.2)
return(p)
}
species_abundance <- function(community=c(1,5,3,7,2,3,1,1,2,1,6)){
return(as.vector(table(community)))
}
octaves <- function(abundance=c()){
octav<-tabulate(floor(log2(abundance))+1)
return(octav)
}
sum_vect <- function (x=c(1,2,3,4),y=c(3,2,9,7,5,15,8)){
len_x <- length(x)
len_y <- length(y)
if (len_x==len_y){
sum <- x + y
}
else if (len_x<len_y){
diff<-len_y-len_x
x <- c(x, integer(diff))
sum <- x + y
}
else if (len_x>len_y){
diff<-len_x-len_y
y <- c(y, integer(diff))
sum <- x + y
}
return (sum)
}
question_16(initial=initialise_max(100))
question_16(initial=initialise_min(100))
question_16(initial=initialise_max(100))
question_16(initial=initialise_min(100))
fern_2 <- function (Start=c(0,-10), Direction=2*pi, Length=5, dir=-1){
if (Length > 0.01){ # Stops the function re-calling itself when length reaches a critically small length
Point_1<-turtle(Start=Start, Direction=Direction, Length=Length)
if (dir==-1){
Point_2<-fern_2(Start=c(Point_1), Direction=Direction-(pi/4), Length=0.38*Length, dir=-1)
Point_3<-fern_2(Start=c(Point_1), Direction=Direction, Length=0.87*Length, dir=1)
}
else if (dir==1){
Point_2<-fern_2(Start=c(Point_1), Direction=Direction+(pi/4), Length=0.38*Length, dir=1)
Point_3<-fern_2(Start=c(Point_1), Direction=Direction, Length=0.87*Length, dir=-1)
}
}
else {
return("ended")
}
}
# par(mfrow=c(1,1))
# plot.new()
plot(x=NULL, ylim=c(-10,32), xlim=c(-20,20), xlab="x", ylab="y", main="Fern_2; start=(0,-10), direction=2*pi, length=5, left-handed")
fern_2(c(0,-10), 2*pi, 5, -1)
install.packages(c("rgbif", "taxize"))
install.packages("installr"); library(installr)
updateR()
install.packages(c("dplyr", "rgbif", "taxize", "tidyr"))
rm(list=ls())
install.packages("taxize")
source('B:/OneDrive/Documents/Uni/Masters/PuP/PUP-SDM/R_Code/Data_Collection_Func.R')
taxa_names<-"Vulpes"
GBIFSpecies(taxa_names = taxa_names, geo_area = geo_area)
taxa_names<-"Canidae"
GBIFSpecies(taxa_names = taxa_names, geo_area = geo_area)
source('B:/OneDrive/Documents/Uni/Masters/PuP/PUP-SDM/R_Code/Data_Collection_Func.R')
setwd("B:/OneDrive/Documents/Uni/Masters/PuP/PUP-SDM/R_Code")
source('B:/OneDrive/Documents/Uni/Masters/PuP/PUP-SDM/R_Code/Data_Collection_Func.R')
GBIFSpecies(taxa_names = taxa_names, geo_area = geo_area)
source('B:/OneDrive/Documents/Uni/Masters/PuP/PUP-SDM/R_Code/Data_Collection_Func.R')
GBIFSpecies(taxa_names = taxa_names, geo_area = geo_area)
taxa_names<-"Carnivora"
GBIFSpecies(taxa_names = taxa_names, geo_area = geo_area)
source('B:/OneDrive/Documents/Uni/Masters/PuP/PUP-SDM/R_Code/Data_Collection_Func.R')
GBIFSpecies(taxa_names = taxa_names, geo_area = geo_area)
install.packages("taxize")
install.packages("taxize")
